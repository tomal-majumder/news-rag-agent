name: Deploy to EC2

on:
  push:
    branches: [main]
    paths:
      - "app/**"
      - "Dockerfile"
      - "requirements.txt"
      - ".github/workflows/**"
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Skip SCP/SSH to EC2 (build only)"
        type: boolean
        default: false
      force_backend:
        description: "Force backend build even if no backend files changed"
        type: boolean
        default: false
      skip_ssh_test:
        description: "Skip SSH connectivity test (not recommended)"
        type: boolean
        default: false

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- 1) SSH connectivity test (always runs; can be no-op if skipped) ---
  test-ssh:
    runs-on: ubuntu-latest
    steps:
      - name: Maybe skip SSH test
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.skip_ssh_test == 'true' }}
        run: echo "Skipping SSH test per user input."

      - name: SSH to EC2 and print system info
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.skip_ssh_test == 'true') }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "SSH connected successfully"
            uname -a
            docker --version || true

  # --- 2) Build & Deploy (waits for SSH test) ---
  deploy:
    runs-on: ubuntu-latest
    needs: [test-ssh]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Detect changes (backend)
      - name: Determine changed parts
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'app/**'
              - 'Dockerfile'
              - 'requirements.txt'

      # ------------- BACKEND TESTING -------------
      - name: Setup Python for testing
        if: ${{ steps.changes.outputs.backend == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_backend == 'true') }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies and run tests
        if: ${{ steps.changes.outputs.backend == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_backend == 'true') }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

          # Run tests if they exist
          if [ -d "app/tests" ]; then
            echo "Running tests..."
            pytest app/tests/ -v
          else
            echo "No tests directory found, skipping tests..."
          fi

      # ------------- BACKEND BUILD & DEPLOY -------------
      - name: Build backend Docker image (on runner)
        if: ${{ steps.changes.outputs.backend == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_backend == 'true') }}
        run: |
          docker build --platform linux/amd64 -t rag-fastapi .

          # Test the built image locally
          echo "Testing Docker image startup..."
          docker run -d --name test-container -p 8001:8000 rag-fastapi
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8001/docs || curl -f http://localhost:8001/ || echo "Health check completed"

          # Stop test container and save image
          docker stop test-container
          docker rm test-container
          docker save rag-fastapi | gzip > backend-image.tar.gz

      - name: DRY RUN â€” skipping backend deploy
        if: ${{ (steps.changes.outputs.backend == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_backend == 'true')) && (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        run: echo "Would SCP backend image and restart container on EC2 (dry_run=true)."

      - name: Copy backend image to EC2
        if: ${{ (steps.changes.outputs.backend == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_backend == 'true')) && !(github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "backend-image.tar.gz"
          target: "~/backend"

      - name: Restart backend on EC2
        if: ${{ (steps.changes.outputs.backend == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_backend == 'true')) && !(github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            cd ~/backend
            docker stop rag-app || true
            docker rm rag-app || true
            docker rmi rag-fastapi || true
            docker load < backend-image.tar.gz
            rm -f backend-image.tar.gz
            docker run -d --name rag-app \
              -p 8000:8000 \
              --restart unless-stopped \
              -e ENVIRONMENT=production \
              -e GROQ_API_KEY='${{ secrets.GROQ_API_KEY }}' \
              -e TAVILY_API_KEY='${{ secrets.TAVILY_API_KEY }}' \
              -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
              rag-fastapi

            # Wait for container to start
            sleep 5

            # Verify deployment
            docker ps | grep rag-app
            docker logs --tail 20 rag-app

            # Test the endpoint
            echo "Testing deployed application..."
            curl -f http://localhost:8000/docs || curl -f http://localhost:8000/ || echo "Health check completed"

            # Clean up unused Docker resources
            docker system prune -f

            echo "Backend deployment completed successfully!"
